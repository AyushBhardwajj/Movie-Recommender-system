# -*- coding: utf-8 -*-
"""movie-recommended_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1baWqbzamx0EOVwcboNrHJ_2PT3QWyaHN
"""

import numpy as np
import pandas as pd

movies = pd.read_csv('/content/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head(1)

movies = movies.merge(credits,on = 'title')



"""merge dataframes"""

# genres
# id
# keywords
# title
# overview
# cast
# crew
movies = movies[['id','title','overview','genres','keywords','cast','crew']]

movies.isnull().sum()

movies.duplicated().sum()
import ast

movies.iloc[0].genres
def convert(obj):
  L=[]
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies.head()

def convert3(obj):
  L=[]
  counter=0
  for i in ast.literal_eval(obj):
    if counter != 3:
        L.append(i['name'])
        counter+=1
    else:
      break
  return L

movies['cast']= movies['cast'].apply(convert3)

def fetch_director_list(obj):
    director_names = []
    try:
        crew_list = ast.literal_eval(obj)
        for member in crew_list:
            if member.get('job') == 'Director':
                director_names.append(member.get('name'))
    except (ValueError, SyntaxError):
        pass  # Handle the case where 'obj' is not a valid literal

    return director_names

movies['crew']= movies['crew'].apply(fetch_director_list)

movies['overview'] = movies['overview'].astype(str)
movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies.head()

movies['genres'] = movies['genres'].apply(lambda x: [i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x: [i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x: [i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x: [i.replace(" ","") for i in x])

movies.head()

movies['tags'] = movies['overview'] + movies['genres']+ movies['keywords']+movies['cast']+movies['crew']
#movies['tags'] = movies['overview'].str.join('')  + movies['genres'].str.join('')  + movies['keywords'].str.join('') + movies['cast'].str.join('') + movies['crew'].str.join('')

movies.head()

new_df = movies[['id','title','tags']]

new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df.head()

import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)

new_df['tags'][0]

new_df['tags']  = new_df['tags'].apply(lambda x:x.lower())

new_df.head()

from sklearn.feature_extraction.text import CountVectorizer
cv  = CountVectorizer(max_features = 5000,stop_words = 'english')

vectors = cv.fit_transform(new_df['tags']).toarray()

vectors[0]

cv.get_feature_names_out()

import nltk

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)

sorted(list(enumerate(similarity[0])),reverse=True,key = lambda x:x[1])[1:6]

def recommend(movie):
  movie_index = new_df[new_df['title']==movie].index[0]
  distances = similarity[movie_index]
  movies_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Avatar')

import pickle